# This file contains pin mappings for the Anycubic Kobra Go/Neo with HC32F460 (board: TriGorilla V_3.0.6) .
# Most parameter came from the stock Marlin firmware
# Initial config credit: xpeng and cringegnere
# This config is the one from 1coderookie for the Kobra Neo and can be found here: https://github.com/1coderookie/Klipper4KobraGoNeo/blob/main/cfg/NEO_1coderookie_printer.cfg  

# Check out my comprehensive infosite about Anycubic's Kobra Neo (and Kobra Go): https://1coderookie.github.io/KobraGoNeoInsights/ 
# Here you'll find some notes on Klipper at the Kobra Neo (and Kobra Go): https://1coderookie.github.io/KobraGoNeoInsights/firmware/fw_klipper/    

# Adjust the settings accordingly! You need to tune specific settings for your individual setup!

# To build the correct firmware, use this config during the klipper.bin creation process.
# - Micro Controller:         Huada Semiconductor HC32F460
# - Communication Interface:  Serial (PA3 & PA2) - Anycubic
# - Application Address:      0x008000
# - Clock Speed:              168MHz (200MHz (Experimental) added in June '23 - https://github.com/klipper3d/klipper/pull/6291)

# See Klipper's Config_Reference.md for a description of parameters.

# Please uncomment or add the belonging [include] entries. 
# If [include] entries are active which files aren't existent, an error message will occur and initialisation won't be successful! 

[include mainsail.cfg]
[include macros.cfg]
[include KAMP_Settings.cfg]

[exclude_object]  # Allows Klipper to exclude objects while a print is in progress - see official docs for further info.
[respond] # Allows Klipper to send notifications, or generate keyboards.

[idle_timeout]
timeout: 3600 # 1 hour

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0  # adjust to your specific setup
restart_method: command

# Driver Control

[tmc2209 stepper_x]
uart_pin: PB10
run_current: 0.95
hold_current: 0.30
stealthchop_threshold: 0

[tmc2209 stepper_y]
uart_pin: PB11
run_current: 0.85
hold_current: 0.30
stealthchop_threshold: 0

[tmc2209 stepper_z]
uart_pin: PB2
run_current: 0.85
hold_current: 0.25
stealthchop_threshold: 0

[tmc2209 extruder]
uart_pin: PB3
run_current: 0.90
hold_current: 0.30
stealthchop_threshold: 0

# Additional Devices

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100, 100, 20  # an example

[servo wipe_servo]
pin: rpi:gpio27
maximum_servo_angle: 180
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0025
initial_angle: 0

# Main Config

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 4000
max_z_velocity: 20
max_z_accel: 20

[stepper_x]
step_pin: PA12
dir_pin: PA11
enable_pin: !PA15
microsteps: 16
rotation_distance: 40
position_endstop: -7
position_min: -7
position_max: 220
homing_speed: 80
endstop_pin: !PH2
homing_retract_dist: 10

[stepper_y]
step_pin: PA9
dir_pin: PA8
enable_pin: !PA15
microsteps: 16
rotation_distance: 40
position_endstop: -17
position_min:-17
position_max: 220
homing_speed: 80
endstop_pin: ^!PC13
homing_retract_dist: 10


[stepper_z]
step_pin: PC7
dir_pin: !PC6
enable_pin: !PA15
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC14  # "probe:z_virtual_endstop" instead of "^PC14" COULD be used for using the probe as a virtual endstop instead of using the regular z endstop, but imho it's not advisable to do so due to the risk of crashing your nozzle if the probe is faulty
position_min: -10
position_max: 240
#position_endstop: 0
homing_speed: 10
second_homing_speed:1
homing_retract_dist: 2.3

[safe_z_home]
home_xy_position: -7, -17
speed: 65
z_hop: 10  
z_hop_speed: 10

[extruder]
max_extrude_only_distance: 101.0
step_pin: PB15
dir_pin: !PB14
enable_pin: !PA15
microsteps: 16
rotation_distance: 7.588980 # Calibrate the rotation distance for your specific setup!
nozzle_diameter: 0.400 # ATTENTION: mind that I'm using a 0.6mm nozzle here, so you have to set your nozzle diameter accordingly!
filament_diameter: 1.750
heater_pin: PB8
#sensor_type: ATC Semitec 104GT-2 # Stock sensor doesn't seem to be an original ATC type actually and reports lower temps than actually present.
sensor_type: Generic 3950 # Seems to give more precise results than the ATC, further tests needed tho.
sensor_pin: PC3
min_temp: 5
min_extrude_temp: 170
max_temp: 260 #Stock is 250
max_extrude_cross_section: 5
pressure_advance: 0.1 # Adjust this value to the result of your Pressure Advance tests.
pressure_advance_smooth_time: 0.04 # = default; you can try smaller smooth time together with smaller pressure advance value

[firmware_retraction]  # Adjust the settings to your needs.
retract_length: 0.8
retract_speed: 50
unretract_extra_length: 0
unretract_speed: 40

[heater_bed]
heater_pin: PB9
sensor_type: EPCOS 100K B57560G104F  # Stock fw config, seems to report the correct temps.
#sensor_type: Generic 3950
sensor_pin: PC1
min_temp: 0
max_temp: 120

[bed_mesh]
speed: 200
horizontal_move_z: 4 # I increased this value to avoid the error "probe triggered prior to movement", you might wanna change it.
mesh_min: 32, 26
mesh_max: 189, 189
probe_count: 5, 5
zero_reference_position: 113.5, 118.5  # This should be the same location where Z_ENDSTOP_CALIBRATE is performed.
algorithm: bicubic
# Example for a setting which probes more points and reaches out to the corners of the bed a bit more:
#mesh_min: 32, 20
#mesh_max: 190, 200
#probe_count: 7, 7
#zero_reference_position: 72.5, 106 #should be the same location where Z_ENDSTOP_CALIBRATION is performed
#algorithm: bicubic

[screws_tilt_adjust]  # Activate this if you're using adjustable spacers (springs/silicone) for the bedmount instead of the rigid stock ones. From the docs: "Tool to help adjust bed screws tilt using Z probe. One may define a screws_tilt_adjust config section to enable a SCREWS_TILT_CALCULATE g-code command."
screw1: -6, 24
screw1_name: Front Left ↙
screw2: 157, 24
screw2_name: Front Right ↘
screw3: 157, 188
screw3_name: Rear Right ↗
screw4: -6, 188
screw4_name: Rear Left ↖
horizontal_move_z: 10
speed: 50
screw_thread: CCW-M4 #most likely - not 100% sure yet though

[probe]
pin: PA1
x_offset: 37.5
y_offset: 4
samples: 6
samples_result: average
samples_tolerance: 0.03
samples_tolerance_retries: 6
sample_retract_dist: 3 # I increased this value from 0.5 to 5 to avoid the error "probe triggered prior to movement", you might wanna change it. 
speed:2
lift_speed:4

[controller_fan controller_fan]
#max_power: 0.75
pin: PB12
#cycle_time: 0.000050 # = 20kHz as this seems to be the frequency in the stock firmware, not 100% sure yet tho

[heater_fan extruder_fan]
pin: PB13
cycle_time: 0.000050 # = 20kHz as this seems to be the frequency in the stock firmware, not 100% sure yet ho

[fan]
pin: PB5
cycle_time: 0.000050 # = 20kHz as this seems to be the frequency in the stock firmware referring to xpeng's findings

[output_pin enable_pin]
#This is the pin controls bed, hotend, extruder fan, part fan.
pin: PB6
value: 1

#[output_pin beeper]
#pin: PB7

#[output_pin bl_pin]
#pin: PC0

#[output_pin tft_rst]
#pin: PB4

#[filament_switch_sensor filament_sensor]  # Activate this and adjust the settings to your needs if using the optional filament runout sensor. Explanations about the settings are taken from the Klipper docs.
#pause_on_runout: True  # When set to True, a PAUSE will execute immediately after a runout is detected. Note that if pause_on_runout is False and the runout_gcode is omitted then runout detection is disabled. Default is True.
#runout_gcode:  # A list of G-Code commands to execute after a filament runout is detected. See docs/Command_Templates.md for G-Code format. If pause_on_runout is set to True this G-Code will run after the PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:  # A list of G-Code commands to execute after a filament insert is detected. See docs/Command_Templates.md for G-Code format. The default is not to run any G-Code commands, which disables insert detection.
#event_delay: 3.0  # The minimum amount of time in seconds to delay between events. Events triggered during this time period will be silently ignored. The default is 3 seconds.
#pause_delay: 0.5  # The amount of time to delay, in seconds, between the pause command dispatch and execution of the runout_gcode. It may be useful to increase this delay if OctoPrint exhibits strange pause behavior. Default is 0.5 seconds.
#switch_pin: !PC15

[temperature_sensor raspbery_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu]
sensor_type: temperature_mcu
name: MCU
min_temp: 0
max_temp: 100
update_interval: 2.0

[input_shaper]
# shaper_freq_x: ...
# shaper_type_x: ...
shaper_freq_y: 23.6
shaper_type_y: zv

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.988
#*# pid_ki = 1.381
#*# pid_kd = 95.687
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 60.778
#*# pid_ki = 0.960
#*# pid_kd = 961.813
#*#
#*# [stepper_z]
#*# position_endstop = 4.580
#*#
#*# [input_shaper]
#*# shaper_type_x = 2hump_ei
#*# shaper_freq_x = 73.0
#*#
#*# [probe]
#*# z_offset = 1.670
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.117585, -0.069669, -0.043419, -0.094669, -0.120502
#*# 	-0.061752, -0.015502, 0.027415, -0.018002, -0.020085
#*# 	-0.055085, -0.020919, 0.014081, -0.020085, -0.045502
#*# 	-0.090919, -0.061335, -0.040085, -0.067585, -0.063419
#*# 	-0.127585, -0.099669, -0.075502, -0.098419, -0.088835
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 32.0
#*# max_x = 189.0
#*# min_y = 26.0
#*# max_y = 189.0
